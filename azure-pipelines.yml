# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo '************'Welcome To Jmeter Distributed Testing Using AzurePipeline************''
  displayName: 'JMeter Distributed Load Testing'

- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'

# - task: Bash@3
#   displayName: 'DockerHub Login'
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo '##Login to Docker Hub'
#       docker login -u rajasekars792 -p *
#       docker --version
#     workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: Bash@3
  displayName: 'ACR Login'
  inputs:
    targetType: 'inline'
    script: |
      echo '##Login to ACR##'
      docker login jmeteracrrepo.azurecr.io -u jmeteracrrepo -p jrW6sM=SUnX9kYNW8pdzdQFct7bkJW3j
    workingDirectory: '$(System.DefaultWorkingDirectory)'

# - task: Bash@3
#   displayName: 'Build and Push docker image'
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo 'Build and Push docker image'
#       ls -lrt $(System.DefaultWorkingDirectory)/Scripts
#       echo 'Build docker image from docker file'
#       docker build -f $(System.DefaultWorkingDirectory)/Scripts/Dockerfile -t rajasekars792/jmeter:jmeter5.3Azv1 .
#       echo 'push to docker image to dockerhub repo'
#       docker push rajasekars792/jmeter:jmeter5.3Azv1

- task: Bash@3
  displayName: 'Build and Push docker image to ACR'
  inputs:
    targetType: 'inline'
    script: |
      echo '##Build and Push docker image to ACR##'
      ls -lrt $(System.DefaultWorkingDirectory)
      
      echo '##Build docker jmmaster image from docker file##'
      docker build -f $(System.DefaultWorkingDirectory)/jmetermasterimage/Dockerfile -t jmeteracrrepo.azurecr.io/jmeter:jmeter5.3Azmasterv1 .
      
      echo '##push to docker jmmaster image to ACR repo##'
      docker push jmeteracrrepo.azurecr.io/jmeter:jmeter5.3Azmasterv1
      
      echo '##Build docker jmslave image from docker file##' 
      docker build -f $(System.DefaultWorkingDirectory)/jmeterslaveimage/Dockerfile -t jmeteracrrepo.azurecr.io/jmeter:jmeter5.3Azslavev1 .
      
      echo '##push to docker jmslave image to ACR repo##'
      docker push jmeteracrrepo.azurecr.io/jmeter:jmeter5.3Azslavev1
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: Bash@3
  displayName: 'Execute Performance Test'
  inputs:
    targetType: 'inline'
    script: |
      echo "##Checking for Docker container status"
      status_master =$(docker ps | grep "jmmaster" | wc -l)
      echo "$status_master"
      if [ $status_master == 1 ]
      then
      docker stop jmmaster
      docker rm -f jmmaster
      fi

      status_slave =$(docker ps | grep "jmslave" | wc -l)
      echo "$status_slave"
      if [ $status_slave == 1 ]
      then
      docker stop jmslave
      docker rm -f jmslave
      fi

      echo "##Creating a Container using the latest Docker Image with indefinte sleep time##"
      # docker run -d --name jmeter-test -p 9270:9270 rajasekars792/jmeter:jmeter5.3v1 sleep infinity
      docker run -d --name jmmaster jmeteracrrepo.azurecr.io/jmeter:jmeter5.3Azmasterv1 sleep infinity
      docker run -d --name jmslave jmeteracrrepo.azurecr.io/jmeter:jmeter5.3Azslavev1 sleep infinity

      echo "##Listing Containers##"
      docker ps -a

      echo "##Extracting jmmaster jmslave container IP address##"
      master_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' jmmaster)
      echo "master ip: $master_ip"

      slave1_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' jmslave)
      echo "slave1 ip: $slave1_ip"

      echo "##Copying test scripts and csv files to JMeter bin location##"
      docker cp $(System.DefaultWorkingDirectory)/test/Pipeline_SampleScript.jmx jmmaster:/home/jmeter/
      docker cp $(System.DefaultWorkingDirectory)/test/Pipeline_SampleScript.jmx jmslave:/home/jmeter/

      echo "##Listing files in master container##"
      docker exec -i jmmaster /bin/bash -c 'cd /home/jmeter/ && ls -lart'

      echo "##Listing files in slave container##"
      docker exec -i jmslave /bin/bash -c 'cd /home/jmeter/ && ls -lart'

      echo "##Executing Loadtest##"
      #docker exec -i -e JVM_ARGS="-Xms2048m -Xmx4096m" jmmaster /bin/bash -c 'jmeter -n -t /home/jmeter/Pipeline_SampleScript.jmx -Dserver.rmi.ssl.disable=true -R${slave1_ip} -l /home/jmeter/jmeter$(Build.BuildId).jtl'
      docker exec -i -e JVM_ARGS="-Xms2048m -Xmx4096m" jmmaster /bin/bash -c "jmeter -n -t /home/jmeter/Pipeline_SampleScript.jmx -Dserver.rmi.ssl.disable=true -R${slave1_ip} -l /home/jmeter/jmeter$(Build.BuildId).jtl"
      
      # #echo "##Docker container logs##"
      # #docker logs jmmaster

      echo "##Viewing master machine jmeter.log##"
      docker exec -i jmmaster /bin/bash -c 'cat jmeter.log'
                
      echo "##Creating HTML Report##"
      docker exec -i jmmaster /bin/bash -c 'jmeter -g /home/jmeter/jmeter$(Build.BuildId).jtl -e -o /home/jmeter/htmlreport$(Build.BuildId)/'

      echo "##Copying JTL and HTML Report to Azure Working DIR##"
      docker cp jmmaster:/home/jmeter/jmeter$(Build.BuildId).jtl $(System.DefaultWorkingDirectory)/test/jmeter$(Build.BuildId).jtl
      docker cp jmmaster:/home/jmeter/htmlreport$(Build.BuildId)/ $(System.DefaultWorkingDirectory)/test/htmlreport$(Build.BuildId)/
      
      ##> /dev/null && cat /home/jmeter/jmeter$(Build.BuildId).jtl' > $(System.DefaultWorkingDirectory)/test/jmeter$(Build.BuildId).jtl

      echo "##Kill and Remove Docker Container##"
      docker stop jmmaster jmslave
      docker rm -f jmmaster jmslave
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: PublishReleaseArtifact@1
  displayName: 'Collate Results'
  inputs:
    artifactPath: '$(System.DefaultWorkingDirectory)'